collections.OrderedDict
An OrderedDict is a dictionary that remembers the order of the keys that were inserted first. If a new entry overwrites an existing entry, the original insertion position is left unchanged.

Example

Code

>>> from collections import OrderedDict
>>> 
>>> ordinary_dictionary = {}
>>> ordinary_dictionary['a'] = 1
>>> ordinary_dictionary['b'] = 2
>>> ordinary_dictionary['c'] = 3
>>> ordinary_dictionary['d'] = 4
>>> ordinary_dictionary['e'] = 5
>>> 
>>> print ordinary_dictionary
{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}
>>> 
>>> ordered_dictionary = OrderedDict()
>>> ordered_dictionary['a'] = 1
>>> ordered_dictionary['b'] = 2
>>> ordered_dictionary['c'] = 3
>>> ordered_dictionary['d'] = 4
>>> ordered_dictionary['e'] = 5
>>> 
>>> print ordered_dictionary
OrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)])
Task

You are the manager of a supermarket.
You have a list of  items together with their prices that consumers bought on a particular day.
Your task is to print each item_name and net_price in order of its first occurrence.

item_name = Name of the item.
net_price = Quantity of the item sold multiplied by the price of each item.

Input Format

The first line contains the number of items, .
The next  lines contains the item's name and price, separated by a space.

Constraints


Output Format

Print the item_name and net_price in order of its first occurrence.

Sample Input

9
BANANA FRIES 12
POTATO CHIPS 30
APPLE JUICE 10
CANDY 5
APPLE JUICE 10
CANDY 5
CANDY 5
CANDY 5
POTATO CHIPS 30
Sample Output

BANANA FRIES 12
POTATO CHIPS 60
APPLE JUICE 20
CANDY 20
Explanation

BANANA FRIES: Quantity bought: , Price: 
Net Price: 
POTATO CHIPS: Quantity bought: , Price: 
Net Price: 
APPLE JUICE: Quantity bought: , Price: 
Net Price: 
CANDY: Quantity bought: , Price: 
Net Price: 

Language
Python 3
More
10111213141516171819202122232425262728
    
    # Print the results in the order of first occurrence
    for item_name, total_price in net_prices.items():
        print(item_name, total_price)

if __name__ == '__main__':
    calculate_net_prices()

Line: 28 Col: 1

Test against custom input
Python
You have earned 20.00 points!
27/115 challenges solved.
23%
Congratulations
You solved this challenge. Would you like to challenge your friends?Share on FacebookShare on TwitterShare on LinkedIn

Test case 0

Test case 1

Test case 2

Test case 3

Test case 4

Test case 5
Compiler Message
Success
Input (stdin)
9
BANANA FRIES 12
POTATO CHIPS 30
APPLE JUICE 10
CANDY 5
APPLE JUICE 10
CANDY 5
CANDY 5
CANDY 5
POTATO CHIPS 30
Expected Output
BANANA FRIES 12
POTATO CHIPS 60
APPLE JUICE 20
CANDY 20
solution:
from collections import OrderedDict

def calculate_net_prices():
    # Read the number of items
    n = int(input())
    
    # Create an OrderedDict to store items and their net prices
    net_prices = OrderedDict()
    
    # Process each item's input
    for _ in range(n):
        line = input().strip()
        item_name, price = line.rsplit(' ', 1)
        price = int(price)
        
        # Update the net price in the OrderedDict
        if item_name in net_prices:
            net_prices[item_name] += price
        else:
            net_prices[item_name] = price
    
    # Print the results in the order of first occurrence
    for item_name, total_price in net_prices.items():
        print(item_name, total_price)

if __name__ == '__main__':
    calculate_net_prices()
